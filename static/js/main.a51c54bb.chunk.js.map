{"version":3,"sources":["queries.js","components/ChatRoom.js","components/Rooms.js","components/Home.js","App.js","cache.js","index.js"],"names":["CHATS","gql","FIND_CHAT","ADD_MESSAGE","CREATE_CHAT","DELETE_CHAT","MESSAGE_ADDED","ChatRoom","user","id","useParams","navigate","useNavigate","useState","message","setMessage","timer","setTimer","redirect","setRedirect","useQuery","variables","data","loading","error","useMutation","addMessage","deleteChat","useSubscription","chatID","onSubscriptionData","subscriptionData","client","newMessage","set","object","dataInStore","readQuery","query","findChat","messages","map","p","includes","writeQuery","concat","err","Error","updateCacheWith","messageAdded","clearTimeout","deleteTimer","setTimeout","chats","filter","chat","class","src","alt","className","name","to","onSubmit","e","preventDefault","length","author","value","onChange","target","type","msg","Rooms","setName","update","store","response","createChat","handleChat","placeholder","Home","setUser","disabled","App","path","element","cache","InMemoryCache","typePolicies","Query","fields","merge","httpLink","createHttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a51c54bb.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\n//fragment - not in use\n// export const USER_FIELDS = gql`\n//   fragment UserFields on User {\n//     username\n//     pic\n//     id\n//   }\n// `\n// export const EVENT_FIELDS = gql`\n//   fragment EventFields on Event {\n//     title\n//     eventType\n//     eventPic\n//     location\n//     description\n//     max\n//     maxGuests\n//     eventDate\n//     createdAt\n//     id\n//   }\n// `\n// export const NESTED_EVENT_FIELDS = gql`\n//   fragment NestedEventFields on Event {\n//     title\n//     eventType\n//     eventPic\n//     location\n//     attendees {\n//       username\n//       pic\n//       id\n//       drink\n//     }\n//     host {\n//       username\n//       pic\n//       id\n//       drink\n//     }\n//     comments {\n//       comment\n//       author {\n//         username\n//         id\n//         pic\n//       }\n//       id\n//     }\n//     description\n//     max\n//     maxGuests\n//     eventDate\n//     createdAt\n//     id\n//   }\n// `\nexport const CHATS = gql`\n  query {\n    chats {\n      id\n      name\n      messages {\n        message\n        author\n        id\n        chatID\n      }\n    }\n  }\n`\nexport const FIND_CHAT = gql`\n  query findChat($id: ID) {\n    findChat(id: $id) {\n      name\n      id\n      messages {\n        message\n        author\n        id\n        chatID\n      }\n    }\n  }\n`\n\nexport const ADD_MESSAGE = gql`\n  mutation addMessage($message: String, $author: String, $chatID: ID) {\n    addMessage(message: $message, author: $author, chatID: $chatID) {\n      message\n      author\n      id\n    }\n  }\n`\nexport const CREATE_CHAT = gql`\n  mutation createChat($name: String) {\n    createChat(name: $name) {\n      id\n      name\n    }\n  }\n`\nexport const DELETE_CHAT = gql`\n  mutation deleteChat($chatID: ID) {\n    deleteChat(chatID: $chatID) {\n      id\n    }\n  }\n`\nexport const MESSAGE_ADDED = gql`\n  subscription messageAdded($chatID: ID) {\n    messageAdded(chatID: $chatID) {\n      message\n      author\n      chatID\n      id\n    }\n  }\n`\n\n// export const ALL_USERS = gql`\n//   query {\n//     allUsers {\n//       username\n//     }\n//   }\n// `\n\n// export const ADD_EVENT = gql`\n//   mutation addEvent(\n//     $title: String!\n//     $eventType: String\n//     $eventPic: String\n//     $location: String\n//     $eventDate: Date\n//     $description: String\n//     $max: Boolean\n//     $maxGuests: Int\n//   ) {\n//     addEvent(\n//       title: $title\n//       eventType: $eventType\n//       eventPic: $eventPic\n//       location: $location\n//       eventDate: $eventDate\n//       description: $description\n//       max: $max\n//       maxGuests: $maxGuests\n//     ) {\n//       ...EventFields\n//     }\n//   }\n//   ${EVENT_FIELDS}\n// `\n// export const EDIT_EVENT = gql`\n//   mutation editEvent(\n//     $title: String!\n//     $eventType: String\n//     $eventPic: String\n//     $location: String\n//     $eventDate: Date\n//     $description: String\n//     $max: Boolean\n//     $maxGuests: Int\n//     $eventId: ID!\n//   ) {\n//     editEvent(\n//       title: $title\n//       eventType: $eventType\n//       eventPic: $eventPic\n//       location: $location\n//       eventDate: $eventDate\n//       description: $description\n//       max: $max\n//       maxGuests: $maxGuests\n//       eventId: $eventId\n//     ) {\n//       ...EventFields\n//       id\n//     }\n//   }\n//   ${EVENT_FIELDS}\n// `\n// export const JOIN_EVENT = gql`\n//   mutation joinEvent($userId: ID!, $eventId: ID!) {\n//     joinEvent(userId: $userId, eventId: $eventId) {\n//       title\n//       attendees {\n//         username\n//         id\n//       }\n//       id\n//     }\n//   }\n// `\n// export const LEAVE_EVENT = gql`\n//   mutation leaveEvent($userId: ID!, $eventId: ID!) {\n//     leaveEvent(userId: $userId, eventId: $eventId) {\n//       title\n//       attendees {\n//         username\n//         id\n//       }\n//       id\n//     }\n//   }\n// `\n// export const FIND_EVENT = gql`\n//   query findEvent($eventId: ID!) {\n//     findEvent(eventId: $eventId) {\n//       ...NestedEventFields\n//     }\n//   }\n//   ${NESTED_EVENT_FIELDS}\n// `\n\n// export const DELETE_EVENT = gql`\n//   mutation deleteEvent($eventId: ID!) {\n//     deleteEvent(eventId: $eventId) {\n//       id\n//     }\n//   }\n// `\n// export const CREATE_USER = gql`\n//   mutation createUser(\n//     $username: String!\n//     $password: String!\n//     $drink: String\n//     $pic: String\n//   ) {\n//     createUser(\n//       username: $username\n//       password: $password\n//       drink: $drink\n//       pic: $pic\n//     ) {\n//       value\n//       user {\n//         username\n//         pic\n//         drink\n//         id\n//         myEvents {\n//           ...EventFields\n//         }\n//       }\n//     }\n//   }\n//   ${EVENT_FIELDS}\n// `\n\n// export const LOGIN = gql`\n//   mutation login($username: String!, $password: String!) {\n//     login(username: $username, password: $password) {\n//       value\n//       user {\n//         username\n//         id\n//         drink\n//         pic\n//         myEvents {\n//           ...EventFields\n//           id\n//         }\n//       }\n//     }\n//   }\n//   ${EVENT_FIELDS}\n// `\n// export const USER_INFO = gql`\n//   query {\n//     me {\n//       username\n//       id\n//       drink\n//       pic\n//       myEvents {\n//         ...EventFields\n//         id\n//       }\n//     }\n//   }\n//   ${EVENT_FIELDS}\n// `\n// export const IS_LOGGED_IN = gql`\n//   query IsUserLoggedIn {\n//     isLoggedIn @client\n//   }\n// `\n// export const CREATE_COMMENT = gql`\n//   mutation createComment($eventId: ID!, $comment: String!, $inResponseTo: ID) {\n//     createComment(\n//       eventId: $eventId\n//       comment: $comment\n//       inResponseTo: $inResponseTo\n//     ) {\n//       comment\n//       id\n//       author {\n//         username\n//         id\n//         pic\n//       }\n//     }\n//   }\n// `\n","import React, { useState } from 'react'\nimport { useParams, Link, useNavigate } from 'react-router-dom'\n\nimport {\n  MESSAGE_ADDED,\n  ADD_MESSAGE,\n  FIND_CHAT,\n  DELETE_CHAT,\n  CHATS,\n} from '../queries'\nimport { useQuery, useSubscription, useMutation } from '@apollo/client'\n\nconst ChatRoom = ({ user }) => {\n  //ROUTER INFO\n  const id = useParams().id\n  const navigate = useNavigate()\n\n  //STATE\n  const [message, setMessage] = useState('')\n  const [timer, setTimer] = useState(null)\n  const [redirect, setRedirect] = useState(false)\n\n  //QUERIES\n  const { data, loading, error } = useQuery(FIND_CHAT, { variables: { id } })\n\n  //MUTATIONS\n  const [addMessage] = useMutation(ADD_MESSAGE)\n  const [deleteChat] = useMutation(DELETE_CHAT)\n\n  const updateCacheWith = (newMessage, client) => {\n    const includedIn = (set, object) => set.map((p) => p.id).includes(object.id)\n\n    try {\n      const dataInStore = client.readQuery({\n        query: FIND_CHAT,\n        variables: { id },\n      })\n\n      if (!includedIn(dataInStore.findChat.messages, newMessage)) {\n        client.writeQuery({\n          query: FIND_CHAT,\n          variables: { id },\n          data: {\n            findChat: {\n              ...dataInStore.findChat,\n              messages: dataInStore.findChat.messages.concat({\n                ...newMessage,\n                chatID: id,\n              }),\n            },\n          },\n        })\n      }\n    } catch (err) {\n      throw new Error(\n        'error from App.js trying to write to Cache from createChat',\n        err.message\n      )\n    }\n  }\n\n  const handleMessage = (event) => {\n    event.preventDefault()\n    if (message.length > 0) {\n      const chatID = id\n      addMessage({ variables: { message, author: user, chatID } })\n      setMessage('')\n    }\n  }\n\n  useSubscription(MESSAGE_ADDED, {\n    variables: { chatID: id },\n    onSubscriptionData: ({ subscriptionData, client }) => {\n      //WRITES TO CACHE\n\n      const newMessage = subscriptionData.data.messageAdded\n      updateCacheWith(newMessage, client)\n      clearTimeout(timer)\n\n      //SETS AUTO DELETE FOR CHATS\n      const deleteTimer = setTimeout(() => {\n        setRedirect(true)\n\n        deleteChat({ variables: { chatID: id } })\n        const dataInStore = client.readQuery({ query: CHATS })\n        client.writeQuery({\n          query: CHATS,\n          data: { chats: dataInStore.chats.filter((chat) => chat.id !== id) },\n        })\n      }, 1000 * 60 * 10) //TEN MINUTES\n      setTimer(deleteTimer)\n    },\n  })\n  if (loading || error)\n    return (\n      <div class=\"loading\">\n        <img src=\"../../public/Loading.svg\" alt=\"loading animation\" />\n      </div>\n    )\n\n  const chat = data.findChat\n  const messages = chat.messages\n\n  //REDIRECTS IF BEEN TOO LONG & DB WILL BE DELETED\n  if (redirect) {\n    navigate('/')\n  }\n  return (\n    <div>\n      <header className=\"chatroom-header\">\n        <div className=\"chatroom-header-container\">\n          <h1>{chat.name}</h1>\n          <Link to=\"/rooms\">\n            <button id=\"back-button\">BACK</button>\n          </Link>\n        </div>\n      </header>\n      <section className=\"chatroom-container\">\n        <form onSubmit={(e) => handleMessage(e)}>\n          <input\n            className=\"chatroom-input\"\n            value={message}\n            onChange={({ target }) => setMessage(target.value)}\n          ></input>\n          <button type=\"submit\">Send</button>\n        </form>\n\n        <ul className=\"chat-box\">\n          {messages.map((msg) => (\n            <li\n              className={\n                user === msg.author ? 'message user-message' : 'message'\n              }\n              key={msg.id}\n            >\n              <span className=\"message-author\">{msg.author}</span>\n              {msg.message}\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  )\n}\nexport default ChatRoom\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { CHATS, CREATE_CHAT } from '../queries'\nimport { useQuery, useMutation } from '@apollo/client'\n\nconst Rooms = () => {\n  const [name, setName] = useState('')\n\n  const [createChat] = useMutation(CREATE_CHAT, {\n    update: (store, response) => {\n      try {\n        const dataInStore = store.readQuery({ query: CHATS })\n        store.writeQuery({\n          query: CHATS,\n          data: {\n            chats: [\n              ...dataInStore.chats,\n              { ...response.data.createChat, messages: [] },\n            ],\n          },\n        })\n      } catch (err) {\n        throw new Error(\n          'error from App.js trying to write to Cache from createChat',\n          err.message\n        )\n      }\n    },\n  })\n  const handleChat = (e) => {\n    e.preventDefault()\n    createChat({ variables: { name } })\n    setName('')\n  }\n  const { data, loading, error } = useQuery(CHATS)\n\n  if (loading || error)\n    return (\n      <div class=\"loading\">\n        <img src=\"../../public/Loading.svg\" alt=\"loading animation\" />\n      </div>\n    )\n  const chats = data.chats\n\n  return (\n    <div>\n      <header className=\"chatroom-header\">\n        <div className=\"chatroom-header-container\">\n          <Link to=\"/home\">\n            <h1>ChatApp</h1>\n          </Link>\n        </div>\n      </header>\n      <section className=\"chatroom-container\">\n        <form id=\"chatroom-form\" onSubmit={(e) => handleChat(e)}>\n          <input\n            className=\"chatroom-input\"\n            placeholder=\"chatroom name\"\n            value={name}\n            onChange={({ target }) => setName(target.value)}\n          ></input>\n          <button type=\"submit\">Create Chat</button>\n        </form>\n\n        <ul id=\"chatroom-list\">\n          {chats.map((chat) => (\n            <li key={chat.id}>\n              <Link to={chat.id}>\n                <button className=\"chat-button\">{chat.name}</button>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  )\n}\nexport default Rooms\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Home = ({ user, setUser }) => {\n  return (\n    <div className=\"landing\">\n      <form>\n        <input\n          id=\"username-input\"\n          value={user}\n          onChange={({ target }) => setUser(target.value)}\n          placeholder=\"username\"\n        ></input>\n        <Link to=\"/rooms\">\n          {!user ? (\n            <button className=\"enter-button e-b-disabled\" disabled>\n              Enter\n            </button>\n          ) : (\n            <button className=\"enter-button\" type=\"submit\">\n              Enter\n            </button>\n          )}\n        </Link>\n      </form>\n    </div>\n  )\n}\nexport default Home\n","import React, { useState } from 'react'\nimport { Routes, Route, Navigate } from 'react-router-dom'\n\nimport ChatRoom from './components/ChatRoom'\nimport Rooms from './components/Rooms'\nimport Home from './components/Home'\n\nfunction App() {\n  const [user, setUser] = useState('')\n  return (\n    <div>\n      <Routes>\n        <Route path=\"/rooms/:id\" element={<ChatRoom user={user} />} />\n        <Route path=\"/rooms\" element={<Rooms />} />\n        <Route path=\"/home\" element={<Home setUser={setUser} user={user} />} />\n        <Route path=\"*\" element={<Navigate to=\"/home\" />} />\n      </Routes>\n    </div>\n  )\n}\n\nexport default App\n","import { InMemoryCache } from '@apollo/client'\n\nexport const cache = new InMemoryCache({\n  typePolicies: {\n    // Chat: {\n    //   merge: false,\n    // },\n    Query: {\n      fields: { chats: { merge: false } },\n    },\n  },\n  //     Query: {\n  //       fields: {\n  //         isLoggedIn: {\n  //           read() {\n  //             return isLoggedInVar()\n  //           },\n  //         },\n  //         eventsArr: {\n  //           read() {\n  //             return eventsArrVar()\n  //           },\n  //         },\n  //         eventsArrFilter: {\n  //           read() {\n  //             return eventsArrFilterVar()\n  //           },\n  //         },\n  //         userData: {\n  //           read() {\n  //             return userDataVar()\n  //           },\n  //         },\n  //         type: {\n  //           read() {\n  //             return typeDataVar()\n  //           },\n  //         },\n  //       },\n  //     },\n  //   },\n})\n\n// export const isLoggedInVar = makeVar(!!localStorage.getItem('user-token'))\n\n// export const eventsArrVar = makeVar([])\n// export const eventsArrFilterVar = makeVar([])\n\n// export const userDataVar = makeVar({})\n\n// export const typeDataVar = makeVar([])\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  createHttpLink,\n  split,\n  // gql,\n} from '@apollo/client'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\n// import { setContext } from '@apollo/client/link/context'\nimport { cache } from './cache'\n\nconst httpLink = createHttpLink({\n  uri: 'https://floating-spire-74284.herokuapp.com/graphql',\n})\n\nconst wsLink = new WebSocketLink({\n  uri: 'wss://floating-spire-74284.herokuapp.com/graphql',\n  // uri: `wss://${window.location.hostanme}:27558/graphql`,\n  options: {\n    reconnect: true,\n    //can add AUTH in over webSocket\n  },\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  httpLink\n)\n// const authLink = setContext((_, { headers }) => {\n//   const token = localStorage.getItem('user-token')\n\n//   return {\n//     headers: {\n//       ...headers,\n//       authorization: token ? `bearer ${token}` : null,\n//     },\n//   }\n// })\n\nconst client = new ApolloClient({\n  link: splitLink, //authLink.concat(httpLink)\n  cache: cache,\n  // typeDefs,\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}